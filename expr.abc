@ <stdio.hdr>
@ "expr.hdr"

fn createBinaryExpr(kind: ExprKind, left: ->Expr, right: ->Expr): ->Expr
{
    local n: ->Expr = malloc(sizeof(*n));
    assert(n);
    n->kind = kind;
    n->left = left;
    n->right = right;
    return n;
}

fn createIntegerExpr(val: ->UStr): ->Expr
{
    local n: ->Expr = malloc(sizeof(*n));
    assert(n);
    n->kind = EXPR_INTEGER;
    n->decimal = val;
    return n;
}

fn createIdentifierExpr(name: ->UStr): ->Expr
{
    local n: ->Expr = malloc(sizeof(*n));
    assert(n);
    n->kind = EXPR_IDENTIFIER;
    n->identifier = name;
    return n;
}

fn createAddrExpr(child: -> Expr): -> Expr
{
    local n: ->Expr = malloc(sizeof(*n));
    assert(n);
    n->kind = EXPR_ADDR;
    n->child = child;
    return n;
}

fn createDerefExpr(child: -> Expr): -> Expr
{
    local n: ->Expr = malloc(sizeof(*n));
    assert(n);
    n->kind = EXPR_DEREF;
    n->child = child;
    return n;
}

fn releaseExpr(expr: ->Expr)
{
    if (!expr) {
        return;
    }

    if (expr->kind == EXPR_INTEGER) {
        free(expr);
        return;
    }
    releaseExpr(expr->left);
    releaseExpr(expr->right);
    free(expr);
}

fn printExprTree(expr: ->Expr)
{
    if (expr->kind >= EXPR_PRIMARY && expr->kind < EXPR_PRIMARY_END) {
        switch (expr->kind)
        {
            case EXPR_INTEGER:    printf(" [ %s ]", expr->decimal); break;
            case EXPR_IDENTIFIER: printf(" [ %s ]", expr->identifier); break;
            default: assert(0);
        }
    } else if (expr->kind >= EXPR_BINARY && expr->kind < EXPR_BINARY_END) {
        printf(" [ ");
        switch (expr->kind) {
            case EXPR_ADD:      printf("+");   break;
            case EXPR_MUL:      printf("*");   break;
            case EXPR_SUB:      printf("-");   break;
            case EXPR_DIV:      printf("/");   break;
            case EXPR_ASSIGN:   printf("{=}"); break;
            default: assert(0);
        }
        printExprTree(expr->left);
        printExprTree(expr->right);
        printf("] ");
    } else if (expr->kind >= EXPR_UNARY && expr->kind < EXPR_UNARY_END) {
        printf(" [ ");
        switch (expr->kind) {
            case EXPR_DEREF:    printf("*");   break;
            case EXPR_ADDR:     printf("\\&"); break;
            default: assert(0);
        }
        printExprTree(expr->child);
        printf("] ");
    } else if (expr->kind == EXPR_CALL) {
        printf(" [ %s() ]", expr->identifier);
    } else {
        assert(0);
    }
}

fn printExprLatexTree(expr: ->Expr)
{
    printf("\\item\n");
    printf("\\[\n");
    printf("\\begin{forest}\n");
    printf("for tree={draw,circle,calign=fixed edge angles}\n");
    printExprTree(expr);
    printf("\n");
    printf("\\end{forest}\n");
    printf("\\]\n");
}

fn loadExpr(expr: ->Expr): GenReg
{
    if (expr->kind >= EXPR_PRIMARY && expr->kind <= EXPR_PRIMARY_END) {
        switch(expr->kind) {
            case EXPR_INTEGER: return genConstant(expr->decimal);
            case EXPR_IDENTIFIER: {
                local addr: GenReg = genLoadAddress(expr->identifier);
                genReleaseReg(addr);
                return genFetch(addr);
            }
            default:
                assert(0 && "loadExpr 1: not all cases handled!");
                return genConstant("0");
        }
    } else if (expr->kind >= EXPR_BINARY && expr->kind < EXPR_BINARY_END) {
        if (expr->kind == EXPR_ASSIGN) {
            local val: GenReg = loadExpr(expr->right);
            local addr: GenReg = loadExprAddress(expr->left);
            genReleaseReg(addr);
            genStore(val, addr);
            return val;
        }
        local left: GenReg = loadExpr(expr->left);
        local right: GenReg = loadExpr(expr->right);
        genReleaseReg(left);
        genReleaseReg(right);
        switch (expr->kind) {
            case EXPR_ADD: return genInstr(GEN_ADD, left, right);
            case EXPR_SUB: return genInstr(GEN_SUB, left, right);
            case EXPR_MUL: return genInstr(GEN_MUL, left, right);
            case EXPR_DIV: return genInstr(GEN_DIV, left, right);
            default:
                assert(0 && "loadExpr 2: not all cases handled!");
                return genConstant("0");
        }
    } else if (expr->kind >= EXPR_UNARY && expr->kind <= EXPR_UNARY_END) {
        switch (expr->kind) {
            case EXPR_ADDR: return loadExprAddress(expr->child);
            case EXPR_DEREF: {
                local n: GenReg = loadExpr(expr->child);
                genReleaseReg(n);
                return genFetch(n);
            }
            default:
                assert(0 && "loadExpr 3: not all cases handled!");
                return genConstant("0");
        }
    } else if (expr->kind == EXPR_CALL) {
        genPrepareFunctionCall(0);
        return genExecuteFunctionCall(expr->identifier, 0);
    }
    assert(0 && "loadExpr 4: not all cases handled!");
    return genConstant("0");
}

fn loadExprAddress(expr: ->Expr): GenReg
{
    switch (expr->kind) {
        case EXPR_IDENTIFIER:
            return genLoadAddress(expr->identifier);
        case EXPR_DEREF:
            return loadExpr(expr->child);
        default:
            assert(0 && "loadExprAdress: not all cases handled!");
            return 0;
    }
}

fn createCallExpr(val: -> UStr): -> Expr
{
    local n: -> Expr = malloc(sizeof(*n));
    assert(n && "out of memory");

    n->kind = EXPR_CALL;
    n->identifier = val;
    return n;
}

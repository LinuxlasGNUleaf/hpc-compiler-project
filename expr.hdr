@ <stdlib.hdr>

@ "ustr.hdr"
@ "gen.hdr"

enum ExprKind
{
    EXPR_BINARY,
    EXPR_ADD = EXPR_BINARY,
    EXPR_MUL,
    EXPR_SUB,
    EXPR_DIV,
    EXPR_ASSIGN,
    EXPR_BINARY_END,

    EXPR_UNARY = EXPR_BINARY_END,
    EXPR_DEREF = EXPR_UNARY,
    EXPR_ADDR,
    EXPR_UNARY_END,

    EXPR_PRIMARY = EXPR_UNARY_END,
    EXPR_INTEGER = EXPR_PRIMARY,
    EXPR_IDENTIFIER,
    EXPR_PRIMARY_END,

    EXPR_CALL,
};

struct Expr
{
    kind:           ExprKind;
    decimal:        -> UStr;
    identifier:     -> UStr;
    left, right:    -> Expr;
    child:          -> Expr;
};

fn loadExprAddress(expr: ->Expr): GenReg;

// constructors (caller becomes owner)
extern fn createBinaryExpr(kind: ExprKind, left: ->Expr, right: ->Expr): ->Expr;
extern fn createIntegerExpr(val: -> UStr): ->Expr;
extern fn createIdentifierExpr(val: -> UStr): ->Expr;
extern fn createDerefExpr(child: ->Expr): ->Expr;
extern fn createAddrExpr(child: ->Expr): ->Expr;

// destructor
extern fn releaseExpr(expr: ->Expr);

// methods
extern fn printExprTree(expr: ->Expr);
extern fn printExprLatexTree(expr: ->Expr);
extern fn loadExpr(expr: ->Expr): GenReg;
extern fn createCallExpr(val: -> UStr): -> Expr;
